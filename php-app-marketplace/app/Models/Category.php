<?php

namespace App\Models;

use App\Scopes\AdultScope;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Category
 *
 * @property int $id
 * @property int $remote_id
 * @property int $contenttype_id
 * @property string $label
 * @property \Carbon\Carbon $created_at
 * @property \Carbon\Carbon $updated_at
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Category whereCreatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Category whereId($value)
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Category whereLabel($value)
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Category whereRemoteId($value)
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Category whereUpdatedAt($value)
 * @mixin \Eloquent
 * @property int $content_type_id
 * @property bool $adult
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Category whereAdult($value)
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\ContentPortal[] $categories
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\ContentItem[] $contentItems
 * @property-read \App\Models\ContentType $contentType
 * @method static \Illuminate\Database\Query\Builder|\App\Models\Category whereContentTypeId($value)
 */
class Category extends Model
{
    protected $guarded = [];
    protected $appends = [];
    protected $fillable = ['remote_id', 'label', 'content_type_id', 'adult'];

    protected static function boot ()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        // static::addGlobalScope(new AdultScope);
    }

    public function contentType()
    {
        return $this->belongsTo(ContentType::class);
    }

    public function contentItems()
    {
        return $this->hasMany(ContentItem::class);
    }

    public function localCategory() {
        return $this->hasOne(LocalCategory::class, 'provider_category_id');
    }

    // public function contentItems()
    // {
    //     return $this->belongsToMany(ContentItem::class);
    // }

    // public function getContentTypeLabelAttribute() 
    // {   
    //     return $this->contentType->label;
    // }

    public function getCreatedAtAttribute($value)
    {
        return date("d/m/Y", strtotime($value));
    }

    public function getUpdatedAtAttribute($value)
    {
        return date("d/m/Y", strtotime($value));
    }
}
